Figura Tglo;
Figura Cdo;
Figura Rctgl;
Figura Crlo;
Figura Pntg;
Figura Hxgno;
Figura Hpgno;
Figura Otgno;

ArrayList <Figura> Figuras;

// implementacion de la clase triangulo, cuadrado, rectangulo, circulo, Pentagono, 
//Hexagono, Heptagono, Octogano
//Movimiento
//Aparecer

void setup(){
  size(600,400);
  Tglo = new Triangulo(50,50,30,350,150,3, random(TWO_PI));
  Cdo = new Cuadrado(20,100,100,3,random(TWO_PI));
  Rctgl = new Rectangulo(30,20,150,200,3,random(TWO_PI));
  Crlo = new Circulo(20,50,150,3,TWO_PI);
  Pntg = new Pentagono(5,20,200,150,2,random(TWO_PI));
  Hxgno = new Hexagono(6,20,200,200,2,random(TWO_PI));
  Hpgno = new Heptagono(7,20,150,200,2,random(TWO_PI));
  Otgno = new Octagono(8,20,250,250,2,random(TWO_PI));
  
  Figuras = new ArrayList <Figura>();
  Figuras.add(Tglo);
  Figuras.add(Cdo);
}

void draw(){
  background(0,0,0);
  println(Tglo.perimetro());
  println(Cdo.perimetro());
  Tglo.display();
  Tglo.movimiento();
  Tglo.rebote();
  Cdo.display();
  Cdo.movimiento();
  Cdo.rebote();
  Rctgl.display();
  Rctgl.movimiento();
  Rctgl.rebote();
  Crlo.display();
  Crlo.movimiento();
  Crlo.rebote();
  Pntg.display();
  Pntg.movimiento();
  Pntg.rebote();
  Hxgno.display();
  Hxgno.movimiento();
  Hxgno.rebote();
  Hpgno.display();
  Hpgno.movimiento();
  Hpgno.rebote();
  Otgno.display();
  Otgno.movimiento();
  Otgno.rebote();

}

//generar una interface con figuras geometricas

interface Figura {
  float perimetro();
  float area();
  void display();
  void movimiento();
  void rebote();
  void polygon(float x, float y, float ap, int l);
}
///////////////////////////////////////////////////////////////// 3
class Triangulo implements Figura{
  int b,h,l1,l2,l3, x,y;
  float v,a;
  color col1;
  
  Triangulo(int b_, int h_, int l1_, int x_, int y_, float v_, float a_){
    b = b_;
    h = h_;
    l1 = l1_;
    x = x_;
    y = y_;
    v = v_;
    a = a_;
    col1 = color(255,150,200);
  }
  float perimetro(){
    return l1*3;
  }
  
  float area(){
    return b*h/2;
  }
  
  void polygon(float x, float y, float ap, int l){}
  
  void display(){
    pushMatrix();
    fill(col1);
    triangle(x,y,x+l1/2,y+l1,x-l1/2,y+l1);
    popMatrix();
  }
  
  void movimiento(){
    x += v*sin(a);
    y += v*cos(a);
  }
  
  void rebote(){
    if(x<=0){
      v *= -1;
      a = random(HALF_PI);
    }
    if(x>=600-l1/2){
      v *= -1;
      a = random(3*HALF_PI);
    }
    if(y<=0){
      v *= -1;
      a = random(4*HALF_PI);
    }
    if(y>=400-l1){
      v *= -1;
      a = random(2*HALF_PI);
    }
  }
}
//////////////////////////////////////////////////////////////// 4
class Cuadrado implements Figura{
  int l,b,h,x,y;
  float v,a;
  color col2;
  
  Cuadrado(int l_, int x_, int y_,float v_, float a_){
    l = l_;
    x = x_;
    y = y_;
    v = v_;
    a = a_;
    col2 = color(255,255,0);
  
  }
  float perimetro(){
    return l*4;
  }
  
  float area(){
    return l*l;
  }
  
  void polygon(float x, float y, float ap, int l){}
  
  void display(){
    pushMatrix();
    fill(col2);
    rect(x,y,l,l);
    popMatrix();
  }
  
  void movimiento(){
    x += v*sin(a);
    y += v*cos(a);
  }
  
  void rebote(){
    if(x<=0){
      v *= -1;
      a = random(HALF_PI);
    }
    if(x>=600-l){
      v *= -1;
      a = random(3*HALF_PI);
    }
    if(y<=0){
      v *= -1;
      a = random(4*HALF_PI);
    }
    if(y>=400-l){
      v *= -1;
      a = random(2*HALF_PI);
    }
  }
}
//////////////////////////////////////////////////////////////// 4
class Rectangulo implements Figura{
  int b, h, x, y;
  float v,a;
  color col3;
  
  Rectangulo(int b_, int h_, int x_, int y_, float v_, float a_){
    b = b_;
    h = h_;
    x = x_;
    y = y_;
    v = v_;
    a = a_;
    col3 = color(random(180,255),0,0);
  }
  
  float perimetro(){
    return b+h*2;
  }
  float area(){
    return b*h;
  }
  
  void polygon(float x, float y, float ap, int l){}
  
  void display(){
    pushMatrix();
    fill(col3);
    rect(x,y,b,h);
    popMatrix();
  }
  
  void movimiento(){
    x += v*sin(a);
    y += v*cos(a);
  }
  
  void rebote(){
    if(x<=0){
      v *= -1;
      a = random(HALF_PI);
    }
    if(x>=600-b){
      v *= -1;
      a = random(3*HALF_PI);
    }
    if(y<=0){
      v *= -1;
      a = random(4*HALF_PI);
    }
    if(y>=400-h){
      v *= -1;
      a = random(2*HALF_PI);
    }
  }
}
///////////////////////////////////////////////////////////////// 0
class Circulo implements Figura{
  float r,v,a;
  int x,y;
  color col4;
  
  Circulo(float r_, int x_, int y_, float v_, float a_){
  r = r_;
  x = x_;
  y = y_;
  v = v_;
  a = a_;
  col4 = color(0,255,0);
  }
  
  float perimetro(){
    return 2*PI*r;
  }
  float area(){
    return PI*r*r;
  }
  
  void polygon(float x, float y, float ap, int l){}
  
  void display(){
    pushMatrix();
    fill(col4);
    noStroke();
    ellipse(x,y,r,r);
    popMatrix();
  }
  
  void movimiento(){
    x += v*sin(a);
    y += v*cos(a);
  }
  
  void rebote(){
    if(x<=0){
      v *= -1;
      a = random(HALF_PI);
    }
    if(x>=600-r/2){
      v *= -1;
      a = random(3*HALF_PI);
    }
    if(y<=0+r/2){
      v *= -1;
      a = random(4*HALF_PI);
    }
    if(y>=400-r/2){
      v *= -1;
      a = random(2*HALF_PI);
    }
  }
}
///////////////////////////////////////////////////////////////// 5
class Pentagono implements Figura{
  int l;
  int x,y;
  float ap, a, v;
  color col5;
  
  Pentagono(int l_,float ap_, int x_, int y_, float v_, float a_){
   l = l_;
  ap = ap_;
  x = x_;
  y = y_;
  v = v_;
  a = a_;
  col5 = color(150,100,200);
  }
  
  float perimetro(){
    return l*5;
  }
  float area(){
    return perimetro()*ap/2;
  }
  
void polygon(float x, float y, float ap, int l){
      float angle = TWO_PI / l;
  beginShape();
  for(float a = 0; a < TWO_PI; a += angle){
    float sx = x + cos(a) * ap;
    float sy = y + sin(a) * ap;
    vertex(sx,sy);
  }
  endShape(CLOSE);
}

void display(){
  pushMatrix();
  fill(col5);
  polygon(x,y,ap,l); //heptagono
  popMatrix();
  }
  
 void movimiento(){
    x += v*sin(a);
    y += v*cos(a);
  }
  
  void rebote(){
    if(x<=0){
      v *= -1;
      a = random(HALF_PI);
    }
    if(x>=600){
      v *= -1;
      a = random(3*HALF_PI);
    }
    if(y<=0){
      v *= -1;
      a = random(4*HALF_PI);
    }
    if(y>=400){
      v *= -1;
      a = random(2*HALF_PI);
    }
  }
}

///////////////////////////////////////////////////////////// 6
class Hexagono implements Figura{
  int l;
  int x,y;
  float ap, a, v;
  color col6;
  
  Hexagono(int l_,float ap_, int x_, int y_, float v_, float a_){
  l = l_;
  ap = ap_;
  x = x_;
  y = y_;
  v = v_;
  a = a_;
  col6 = color(150,100,200);
  }
  
  float perimetro(){
    return l*6;
  }
  float area(){
    return perimetro()*ap/2;
  }
  
  void polygon(float x, float y, float ap, int l){
  float angle = TWO_PI / l;
  beginShape();
  for(float a = 0; a < TWO_PI; a += angle){
    float sx = x + cos(a) * ap;
    float sy = y + sin(a) * ap;
    vertex(sx,sy);
  }
  endShape(CLOSE);
  }
  
  void display(){
  pushMatrix();
  fill(col6);
  polygon(x,y,ap,l); //heptagono
  popMatrix();
  }
  
  void movimiento(){
    x += v*sin(a);
    y += v*cos(a);
  }
  
  void rebote(){
    if(x<=0){
      v *= -1;
      a = random(HALF_PI);
    }
    if(x>=600){
      v *= -1;
      a = random(3*HALF_PI);
    }
    if(y<=0){
      v *= -1;
      a = random(4*HALF_PI);
    }
    if(y>=400){
      v *= -1;
      a = random(2*HALF_PI);
    }
  }
}
//////////////////////////////////////////////////////////////// 7
class Heptagono implements Figura{
  int l;
  int x,y;
  float ap, a, v;
  color col7;
  
  Heptagono(int l_,float ap_, int x_, int y_, float v_, float a_){
    l = l_;
  ap = ap_;
  x = x_;
  y = y_;
  v = v_;
  a = a_;
  col7 = color(100,250,100);
  }
  
  float perimetro(){
    return l*7;
  }
  float area(){
    return perimetro()*ap/2;
  }
  
  void polygon(float x, float y, float ap, int l){
  float angle = TWO_PI / l;
  beginShape();
  for(float a = 0; a < TWO_PI; a += angle){
    float sx = x + cos(a) * ap;
    float sy = y + sin(a) * ap;
    vertex(sx,sy);
  }
  endShape(CLOSE);
  }
  
  void display(){
  pushMatrix();
  fill(col7);
  polygon(x,y,ap,l); //heptagono
  popMatrix();
  }
  
  void movimiento(){
  x += v*sin(a);
  y += v*cos(a);
  }
  
  void rebote(){
  if(x<=0){
      v *= -1;
      a = random(HALF_PI);
    }
    if(x>=600){
      v *= -1;
      a = random(3*HALF_PI);
    }
    if(y<=0){
      v *= -1;
      a = random(4*HALF_PI);
    }
    if(y>=400){
      v *= -1;
      a = random(2*HALF_PI);
    }
  }
}
////////////////////////////////////////////////////////////////// 8
class Octagono implements Figura{
  int l;
  int x,y;
  float ap, a, v;
  color col8;
  
  Octagono(int l_,float ap_, int x_, int y_, float v_, float a_){
   l = l_;
  ap = ap_;
  x = x_;
  y = y_;
  v = v_;
  a = a_;
  col8 = color(50,150,250);
  }
  
  float perimetro(){
    return l*8;
  }
  float area(){
    return perimetro()*ap/2;
  }
  
  void polygon(float x, float y, float ap, int l){
  float angle = TWO_PI / l;
  beginShape();
  for(float a = 0; a < TWO_PI; a += angle){
    float sx = x + cos(a) * ap;
    float sy = y + sin(a) * ap;
    vertex(sx,sy);
  }
  endShape(CLOSE);
  }
  
  void display(){
  pushMatrix();
  fill(col8);
  polygon(x,y,ap,l); //heptagono
  popMatrix();
  }
  
 void movimiento(){
    x += v*sin(a);
    y += v*cos(a);
 }  
 
 void rebote(){
   if(x<=0){
      v *= -1;
      a = random(HALF_PI);
    }
    if(x>=600){
      v *= -1;
      a = random(3*HALF_PI);
    }
    if(y<=0){
      v *= -1;
      a = random(4*HALF_PI);
    }
    if(y>=400){
      v *= -1;
      a = random(2*HALF_PI);
    }
 }
}
